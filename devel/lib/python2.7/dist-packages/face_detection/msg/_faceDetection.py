"""autogenerated by genpy from face_detection/faceDetection.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import face_detection.msg

class faceDetection(genpy.Message):
  _md5sum = "44eaaaaf6a94a79d38417daa8da6203d"
  _type = "face_detection/faceDetection"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 faceCount
int32 frameWidth
int32 frameHeight
face[] faces

================================================================================
MSG: face_detection/face
int32 x
int32 y
int32 width
int32 height
eye[] eyes

================================================================================
MSG: face_detection/eye
int32 x
int32 y
int32 width
int32 height

"""
  __slots__ = ['faceCount','frameWidth','frameHeight','faces']
  _slot_types = ['int32','int32','int32','face_detection/face[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       faceCount,frameWidth,frameHeight,faces

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(faceDetection, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.faceCount is None:
        self.faceCount = 0
      if self.frameWidth is None:
        self.frameWidth = 0
      if self.frameHeight is None:
        self.frameHeight = 0
      if self.faces is None:
        self.faces = []
    else:
      self.faceCount = 0
      self.frameWidth = 0
      self.frameHeight = 0
      self.faces = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3i.pack(_x.faceCount, _x.frameWidth, _x.frameHeight))
      length = len(self.faces)
      buff.write(_struct_I.pack(length))
      for val1 in self.faces:
        _x = val1
        buff.write(_struct_4i.pack(_x.x, _x.y, _x.width, _x.height))
        length = len(val1.eyes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.eyes:
          _x = val2
          buff.write(_struct_4i.pack(_x.x, _x.y, _x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.faces is None:
        self.faces = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.faceCount, _x.frameWidth, _x.frameHeight,) = _struct_3i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faces = []
      for i in range(0, length):
        val1 = face_detection.msg.face()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _struct_4i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.eyes = []
        for i in range(0, length):
          val2 = face_detection.msg.eye()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y, _x.width, _x.height,) = _struct_4i.unpack(str[start:end])
          val1.eyes.append(val2)
        self.faces.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3i.pack(_x.faceCount, _x.frameWidth, _x.frameHeight))
      length = len(self.faces)
      buff.write(_struct_I.pack(length))
      for val1 in self.faces:
        _x = val1
        buff.write(_struct_4i.pack(_x.x, _x.y, _x.width, _x.height))
        length = len(val1.eyes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.eyes:
          _x = val2
          buff.write(_struct_4i.pack(_x.x, _x.y, _x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.faces is None:
        self.faces = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.faceCount, _x.frameWidth, _x.frameHeight,) = _struct_3i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.faces = []
      for i in range(0, length):
        val1 = face_detection.msg.face()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _struct_4i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.eyes = []
        for i in range(0, length):
          val2 = face_detection.msg.eye()
          _x = val2
          start = end
          end += 16
          (_x.x, _x.y, _x.width, _x.height,) = _struct_4i.unpack(str[start:end])
          val1.eyes.append(val2)
        self.faces.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i = struct.Struct("<3i")
_struct_4i = struct.Struct("<4i")
